@forward './core/theming/definition' show define-theme, define-colors, define-typography,
define-density;
@forward './core/theming/color-api-backwards-compatibility' show color-variants-backwards-compatibility;

@forward './core/tokens/m2' show m2-tokens-from-theme;
@forward './core/tokens/m3-system' show system-level-colors,
system-level-typography, system-level-elevation, system-level-shape,
system-level-motion, system-level-state, theme, theme-overrides;

@forward './core/theming/all-theme' show all-component-themes, all-component-bases;
@forward './core/color/all-color' show all-component-colors;
@forward './core/typography/all-typography' show all-component-typographies;
@forward './core/density/all-density' show all-component-densities;

$breakpoints: (
  sm: 576px, // Mobile portrait
  md: 768px, // Tablet portrait, Mobile landscape
  lg: 992px, // Tablet portrait, Tablet landscape
  xl: 1200px, // Tablet landscape, Desktop
  xxl: 1400px // Larger desktop
);

/// This mixin applies media queries for a specific breakpoint.
/// It supports `min-width` and `max-width` queries.
///
/// @param {String} $breakpoint - The name of the breakpoint (must exist in `$breakpoints` map).
/// @param {String} $type - The type of media query (`min` or `max`). Default is `max`.
///
@mixin breakpoint($breakpoint, $type: max) {
  @if not map-has-key($breakpoints, $breakpoint) {
    @error "Unknown breakpoint: #{$breakpoint}.";
  }
  @else {
    $size: map-get($breakpoints, $breakpoint);
    @if $type ==max {
      @media (max-width: $size) {
        @content;
      }
    }
    @else if $type ==min {
      @media (min-width: $size) {
        @content;
      }
    }
    @else {
      @error "Unknown query type: #{$type}. Use 'min' or 'max'.";
    }
  }
}


/// This mixin applies media queries between two breakpoints.
/// It ensures the breakpoints exist in `$breakpoints` before applying styles.
///
/// @param {String} $from - The starting breakpoint (must exist in `$breakpoints` map).
/// @param {String} $to - The ending breakpoint (must exist in `$breakpoints` map).
///
@mixin breakpoint-between($from, $to) {
  @if not (map-has-key($breakpoints, $from) and map-has-key($breakpoints, $to)) {
    @error "Unknown breakpoint: #{$from} or #{$to}.";
  }
  @else {
    $from-size: map-get($breakpoints, $from);
    $to-size: map-get($breakpoints, $to);

    @media (min-width: $from-size) and (max-width: $to-size) {
      @content;
    }
  }
}
